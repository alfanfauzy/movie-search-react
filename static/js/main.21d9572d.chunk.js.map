{"version":3,"sources":["images/movie.png","Component/Search/Search.js","utils/storage.js","store/action/movieAction.js","Component/View/View.js","Component/Modal/Modal.js","Component/Loading/Loading.js","Page/Page.js","serviceWorker.js","store/index.js","index.js"],"names":["module","exports","Search","props","useState","valueSearch","setValueSearch","className","type","placeholder","onChange","e","target","value","Button","variant","id","onClick","length","search","toast","error","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","getMovieFavoriteToken","valueId","JSON","parse","localStorage","getItem","addMovieFavorite","payload","View","dispatch","useDispatch","movieFavorite","useSelector","state","getTab","tab","getArrayMovieFavorite","addMovieToFavorite","imdbID","movie","array","addArray","map","item","key","splice","push","setItem","stringify","setMovieFavoriteToken","removeItem","showMovieById","openModal","moviesDetail","showMovieFavorite","favList","i","x","useEffect","Table","striped","borderless","hover","size","valueTab","valueMovie","index","style","border","background","Title","Year","includes","color","getMovieFavorite","undefined","colSpan","textAlign","href","showMovie","movies","PopUpModal","Modal","centered","Body","Container","Row","Col","xs","src","movieByID","Poster","alt","Released","Director","Actors","Plot","Awards","Genre","Footer","close","Loading","Page","setKey","setError","loading","setLoading","show","setShow","resultSearchMovie","searchMovieById","searchMovie","a","fetch","response","json","data","Response","searchById","Logo","width","Tabs","activeKey","onSelect","k","Tab","eventKey","title","Boolean","window","location","hostname","match","globalState","movieRedux","createStore","action","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.21d9572d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie.c0d8f65c.png\";","import React, {useState} from 'react'\r\n\r\nimport {Button } from \"react-bootstrap\";\r\n\r\n// Import Toast Component\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Search = (props) => {\r\n    const [valueSearch, setValueSearch] = useState(\"\");\r\n\r\n    const handleInputSearch = (e) => { \r\n      setValueSearch(e.target.value);\r\n    };\r\n\r\n    const handleButtonSearch = (e) => {\r\n      if(valueSearch.length !== 0){\r\n        props.search(valueSearch);\r\n      }else{\r\n        toast.error(\"â›” Please fill the input search\");\r\n      }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n          <form>\r\n            <div className=\"input-group mb-5\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search your favorite movie . .\"\r\n                onChange={handleInputSearch}\r\n                value={valueSearch}\r\n              />\r\n              <div className=\"input-group-append\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  id=\"basic-addon2\"\r\n                  onClick={handleButtonSearch}\r\n                >\r\n                  Search\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={2500}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","const TOKEN_STORAGE_IMDBID = 'IMDBID_FAVORITE';\r\nconst TOKEN_STORAGE_MOVIE = 'MOVIE_FAVORITE';\r\n\r\nexport function getImdbIdFavoriteToken(){\r\n    return JSON.parse(localStorage.getItem(TOKEN_STORAGE_IMDBID));\r\n}\r\n\r\nexport function setImdbIdFavoriteToken(value){\r\n    localStorage.setItem(TOKEN_STORAGE_IMDBID, JSON.stringify(value));\r\n}\r\n\r\nexport function setMovieFavoriteToken(valueId, value){\r\n    localStorage.setItem(TOKEN_STORAGE_MOVIE + (valueId) , JSON.stringify(value));\r\n}\r\n\r\nexport function getMovieFavoriteToken(valueId){\r\n    return JSON.parse(localStorage.getItem(TOKEN_STORAGE_MOVIE + (valueId)));\r\n}\r\n\r\nexport function removeMovieFavoriteToken(valueId){\r\n    localStorage.removeItem(TOKEN_STORAGE_MOVIE + (valueId));\r\n}","export const addResultSearchMovie = (value) => {\r\n    return({\r\n        type: \"RESULT_SEARCH_MOVIE\",\r\n        payload: value\r\n    })\r\n}\r\n\r\nexport const addSearchMovieById = (value) => {\r\n    return({\r\n        type: \"SEARCH_MOVIE_BY_ID\",\r\n        payload: value\r\n    })\r\n}\r\n\r\nexport const addMovieFavorite = (value) => {\r\n    return({\r\n        type: \"ADD_MOVIE_FAVORITE\",\r\n        payload: value\r\n    })\r\n}","//Import Component\r\nimport React, { useEffect } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { IoIosHeart, IoIosHeartEmpty } from \"react-icons/io\";\r\n\r\n// Import Storage\r\nimport {\r\n  getImdbIdFavoriteToken,\r\n  setImdbIdFavoriteToken,\r\n  setMovieFavoriteToken,\r\n  getMovieFavoriteToken,\r\n  removeMovieFavoriteToken,\r\n} from \"../../utils/storage\";\r\n\r\n// Redux\r\nimport { addMovieFavorite } from \"../../store/action/movieAction\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst View = (props) => {\r\n  //Initiation for redux\r\n  const dispatch = useDispatch();\r\n  const movieFavorite = useSelector((state) => state.movieFavorite);\r\n\r\n  //Initiation variable to handle Tab\r\n  const getTab = props.tab === \"search\" ? \"search\" : \"favorite\";\r\n\r\n  //Initiation variable to get List Favorite Movie\r\n  const getArrayMovieFavorite = getImdbIdFavoriteToken();\r\n\r\n  // Handle Add Movie to Favorite with parameter imdbID & movie\r\n  const addMovieToFavorite = (imdbID, movie) => {\r\n    let array = movieFavorite;\r\n    let addArray = true;\r\n\r\n    // Check in var array , if there are imdbID in array , set addArray to false\r\n    array.map((item, key) => {\r\n      if (item === imdbID) {\r\n        array.splice(key, 1);\r\n        addArray = false;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // when imdb not in array , addArray set to true and will push imdbID to array.\r\n    if (addArray) {\r\n      array.push(imdbID);\r\n    }\r\n\r\n    // send array data to State Store ==> movieFavorite\r\n    dispatch(addMovieFavorite([...array]));\r\n\r\n    // set array imdbID data to save in localstorage\r\n    setImdbIdFavoriteToken(movieFavorite);\r\n\r\n    //Get item in local storage by imdbID\r\n    const storage = getMovieFavoriteToken(imdbID);\r\n\r\n    // Check if result storage is null\r\n    // set data movie to save in Localstorage\r\n    // if result return not null, remove data movie by parameter (imdbID)\r\n    if (storage == null) {\r\n      setMovieFavoriteToken(imdbID, movie);\r\n    } else {\r\n      removeMovieFavoriteToken(imdbID);\r\n    }\r\n  };\r\n\r\n  // Handle show detail movie in modal with parameter value model and boolean\r\n  const showMovieById = (value, openModal) => {\r\n    props.moviesDetail(value, openModal);\r\n  };\r\n\r\n  // Handle show list movie with parameter value tab and value movie\r\n  const showMovie = (valueTab, valueMovie) => {\r\n    if (valueMovie !== null) {\r\n      // If value tab == search, show data movie from result fetch API\r\n      if (valueTab === \"search\") {\r\n        return valueMovie.map((movie, index) => (\r\n          <tr key={index}>\r\n            <td>\r\n              <button\r\n                style={{ border: \"none\", background: \"transparent\" }}\r\n                onClick={() => {\r\n                  showMovieById(movie.imdbID, true);\r\n                }}\r\n              >\r\n                {movie.Title}\r\n              </button>\r\n            </td>\r\n            <td>{movie.Year}</td>\r\n            <td>{movie.imdbID}</td>\r\n            <td>\r\n              {movieFavorite.includes(movie.imdbID) ? (\r\n                <IoIosHeart\r\n                  onClick={() => addMovieToFavorite(movie.imdbID, movie)}\r\n                  style={{ color: \"red\" }}\r\n                />\r\n              ) : (\r\n                <IoIosHeartEmpty\r\n                  onClick={() => addMovieToFavorite(movie.imdbID, movie)}\r\n                  style={{ color: \"red\" }}\r\n                />\r\n              )}\r\n            </td>\r\n          </tr>\r\n        ));\r\n\r\n        // If value tab == favorite, show data movie from local storage\r\n      } else {\r\n        const getMovieFavorite = showMovieFavorite();\r\n\r\n        // if user has not add movie to favorite show this.\r\n        if (\r\n          getMovieFavorite === null ||\r\n          getMovieFavorite.length === 0 ||\r\n          getMovieFavorite === undefined\r\n        ) {\r\n          return (\r\n            <tr>\r\n              <td colSpan=\"4\">\r\n                <span style={{ textAlign: \"center\" }}>\r\n                  Add movie to your favorite\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          );\r\n\r\n          // if user has add movie to favorite show list.\r\n        } else {\r\n          if (getMovieFavorite !== null) {\r\n            return getMovieFavorite.map((movie, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <a\r\n                    href=\"/#\"\r\n                    onClick={() => {\r\n                      showMovieById(movie.imdbID, true);\r\n                    }}\r\n                  >\r\n                    {movie.Title}\r\n                  </a>\r\n                </td>\r\n                <td>{movie.Year}</td>\r\n                <td>{movie.imdbID}</td>\r\n                <td>\r\n                  {movieFavorite.includes(movie.imdbID) ? (\r\n                    <IoIosHeart\r\n                      onClick={() => addMovieToFavorite(movie.imdbID, movie)}\r\n                      style={{ color: \"red\" }}\r\n                    />\r\n                  ) : (\r\n                    <p> - </p>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ));\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle show list favorite movie.\r\n  const showMovieFavorite = () => {\r\n    let favList = [];\r\n\r\n    // Check if data movie favorite not null,\r\n    // then get data movie favorite and set to array favList.\r\n\r\n    if (getArrayMovieFavorite !== null) {\r\n      for (var i = 0; i < getArrayMovieFavorite.length; i++) {\r\n        let x = getArrayMovieFavorite[i];\r\n        favList[i] = getMovieFavoriteToken(x);\r\n      }\r\n      return favList;\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Handle useEffect, execute this when state movie favorite has update.\r\n  useEffect(() => {\r\n    if (getArrayMovieFavorite !== null) {\r\n      dispatch(addMovieFavorite([...getArrayMovieFavorite]));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Table striped borderless hover size=\"lg\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Year</th>\r\n            <th>IMDBId</th>\r\n            <th>#</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{showMovie(getTab, props.movies)}</tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default View;\r\n","import React, { Fragment } from 'react'\r\nimport {Button, Modal, Container, Row, Col, Table} from 'react-bootstrap'\r\n\r\nimport \"./Modal.css\";\r\n\r\nconst PopUpModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal\r\n                {...props}\r\n                size=\"xl\"\r\n                centered\r\n            >   \r\n                <Modal.Body className=\"show-grid\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                            <img className=\"p-2 mt-2\" src={props.movieByID.Poster} alt={props.movieByID.Poster}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                            <Table striped borderless hover size=\"lg\" className=\"mt-3\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td style={{ textAlign: 'center'}} colSpan=\"2\"><h3>{props.movieByID.Title}</h3></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Released</h6></td>\r\n                                        <td><p>{props.movieByID.Released}</p></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Director</h6></td>\r\n                                        <td><p>{props.movieByID.Director}</p></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Actors</h6></td>\r\n                                        <td><p>{props.movieByID.Actors}</p></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Plot</h6></td>\r\n                                        <td><p>{props.movieByID.Plot}</p></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Awards</h6></td>\r\n                                        <td><p>{props.movieByID.Awards}</p></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><h6>Genre</h6></td>\r\n                                        <td><p>{props.movieByID.Genre}</p></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.close}>Close</Button>\r\n                </Modal.Footer> \r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PopUpModal\r\n","import React, {Fragment} from 'react';\r\n\r\nimport { VscLoading } from \"react-icons/vsc\";\r\n\r\nconst Loading = () => {\r\n    return(\r\n        <Fragment>\r\n            <VscLoading className=\"loading\"/>\r\n            <p>Now Loading . . .</p>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Loading;","// Import component\nimport React, { useState } from \"react\";\nimport { Container, Tabs, Tab } from \"react-bootstrap\";\nimport Search from \"../Component/Search/Search\";\nimport View from \"../Component/View/View\";\nimport PopUpModal from \"../Component/Modal/Modal\";\nimport Loading from \"../Component/Loading/Loading\";\nimport Logo from \"../images/movie.png\"\n\n//Import CSS\nimport \"./Page.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Redux\nimport {\n  addResultSearchMovie,\n  addSearchMovieById,\n} from \"../store/action/movieAction\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Page = () => {\n\n  // Initiation APIKey\n  const API_KEY = \"33e8c2d6\";\n\n  // Initiation state\n  const [key, setKey] = useState(\"search\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [show, setShow] = useState(false);\n\n  // Handle Modal\n  const handleShow = () => setShow(true);\n  const handleClose = () => setShow(false);\n\n  //Initiation for redux\n  const dispatch = useDispatch();\n  const resultSearchMovie = useSelector((state) => state.resultSearchMovie);\n  const searchMovieById = useSelector((state) => state.searchMovieById);\n\n  const search = async (searchMovie) => {\n    setLoading(true);\n    setError(null);\n\n    const response = await fetch(`https://www.omdbapi.com/?s=${searchMovie}&apikey=${API_KEY}`);\n    const data = await response.json()\n\n    if (data.Response === \"True\") {\n      dispatch(addResultSearchMovie(data.Search));\n      setLoading(false);\n    } else {\n      setError(data.error);\n      setLoading(false);\n    }\n    \n  };\n\n  const searchById = async (searchMovieById) => {\n    const response = await fetch(`https://www.omdbapi.com/?i=${searchMovieById}&apikey=${API_KEY}`);\n    const data = await response.json()\n    \n    if (data.Response === \"True\") {\n      dispatch(addSearchMovieById(data));\n      setLoading(false);\n    } else {\n      setError(data.error);\n      setLoading(false);\n    }\n\n    handleShow();\n  };\n\n  return (\n    <div className=\"content p-5\">\n      <div className=\"header mb-2\">\n        <img src={Logo} alt=\"logo\" style={{width: '100px'}}/>\n      </div>\n      <Container className=\"p-3\">\n        <Tabs\n          id=\"controlled-tab-example\"\n          className=\"mb-5\"\n          activeKey={key}\n          onSelect={(k) => setKey(k)}\n        >\n          <Tab eventKey=\"search\" title=\"Search Movie\">\n            <Search search={search} />\n            {/** If result resultSearchMovie not 0 , \n                 then Check If Loading set true & Error has not message , show Component Loading\n                 then Check If Error has a message , show Component Error Message\n                 then show component View to show result search movie */}\n\n            {resultSearchMovie.length !== 0 ? (\n              loading && !error ? (\n                <Loading />\n              ) : error ? (\n                <div className=\"errorMessage\">{error}</div>\n              ) : (\n                <View\n                  movies={resultSearchMovie}\n                  moviesDetail={searchById}\n                  tab={key}\n                />\n              )\n            ) : (\n                <span>Search your favorite movie</span>\n            )}\n            \n          </Tab>\n\n          <Tab eventKey=\"favorite\" title=\"My Favorit Movie\">\n            <View\n              movies={resultSearchMovie}\n              moviesDetail={searchById}\n              tab={key}\n            />\n          </Tab>\n        </Tabs>\n      </Container>\n\n      <PopUpModal show={show} movieByID={searchMovieById} close={handleClose} />\n    </div>\n  );\n};\n\nexport default Page;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from 'redux';\r\n\r\nconst globalState = {\r\n    movieFavorite : [],\r\n    resultSearchMovie: [],\r\n    searchMovieById: [],\r\n}\r\n\r\n// Reducer\r\nconst rootReducer = (state = globalState, action) => {\r\n    const {type, payload} = action;\r\n    switch(type){\r\n        case \"RESULT_SEARCH_MOVIE\":\r\n            return{\r\n                ...state,\r\n                resultSearchMovie : payload\r\n            }\r\n        case \"SEARCH_MOVIE_BY_ID\":\r\n            return{\r\n                ...state,\r\n                searchMovieById : payload\r\n            }\r\n        case \"ADD_MOVIE_FAVORITE\":\r\n            return{\r\n                ...state,\r\n                movieFavorite : payload\r\n            }\r\n        default:\r\n            return{\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\n// Store\r\nconst movieRedux = createStore(rootReducer);\r\n\r\nexport default movieRedux;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Page/Page';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux\nimport movieRedux from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={movieRedux}>  \n      <Page />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}